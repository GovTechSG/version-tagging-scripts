#!/bin/sh
cd ../..;
# error count, anything more than 1 and we should exit with 1
ERRORS=0;
# each test case should alwys be larger than the next so we can automate checking
# note that tags will actually be created, so use numbers that users prolly won't use
TEST_CASES="
1000.0.0
1001.0.0
1010.0.0
1100.0.0
9000.0.0
10000.0.0
10000.1.0
10000.9.0
10000.10.0
10000.10.1
10000.10.10
10000.10.99
10000.99.99
10000.99.100
10000.100.99
"

test_if_largest () {
  printf "\n\t$1";
  git tag $1;
  TEST_CASE=$(./get-latest -q);
  if [[ $TEST_CASE != $1 ]] | [[ $? != 0 ]]; then
    exit 1;
  fi;
}

teardown () {
  printf "\n\t$1";
  git tag -d $1 > /dev/null;
}

printf "Processing... ";
echo $TEST_CASES | xargs -n 1 | xargs -I@ sh -c "$(declare -f test_if_largest); test_if_largest @;";
[[ $? != 0 ]] && FAILURE=1 || FAILURE=0;
printf "\n...DONE.\nRemoving... ";
echo $TEST_CASES | xargs -n 1 | xargs -I@ sh -c "$(declare -f teardown); teardown @;";
printf "\n...DONE.\nExiting with status code $FAILURE.\n\n";

exit $FAILURE;